<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lEstoque.Text" xml:space="preserve">
    <value> - Na opção de estoque, as listas de estoque geral, alimentos, equipamentos e lavanderia ficam disponíveis para o administrador verificar, e ao clicar em qualquer opção, os detalhes e a possibilidade de alteração vão ser exibida no lado esquerdo do painel. 
 - Para incluir um novo, basta clicar no botão “Novo”, preencher as opções e clicar em salvar.
</value>
  </data>
  <data name="lAdmin.Text" xml:space="preserve">
    <value>Na opção dos dados pessoais do administrador, existem apenas um nome, o CNPJ, o cargo e uma senha de entrada para o sistema. 

A lista de administradores fica disponível no meio da tela e ao clicar, os detalhes poderão ser alterados ou excluídos. 

Para cadastrar, basta clicar em “Novo” e preencher as informações.
</value>
  </data>
  <data name="lFunc.Text" xml:space="preserve">
    <value>Na opção de funcionários, a lista fica do lado direito, ao clicar em um funcionário, todos detalhes aparecerão no painel esquerdo, sendo possível a alteração e exclusão dos dados de cada. 

Para cadastrar, basta clicar em “Novo” e preencher as opções no formulário, sendo obrigatório CPF e senha.
</value>
  </data>
  <data name="lServ.Text" xml:space="preserve">
    <value> - Na opção de adicionais, o funcionário poderá cadastrar tipos de consumos no banco de dados para ser escolhido no fechamento.

 - Na tela, uma lista com todos serviços adicionais fica no meio, ao clicar poderá alterar ou excluir os dados, e para cadastrar um novo serviço, basta clicar em “Novo”, preencher as opções e salvar.
</value>
  </data>
  <data name="lCheckout.Text" xml:space="preserve">
    <value> - Para realizar o check-out, é necessário que já esteja realizado o check-in, selecionar o CPF correto, e então se houver consumos a serem adicionados, clicar na opção adicionar logo abaixo dos detalhes da reserva, selecionar o tipo e quantidade do consumo, e incluir na lista para ser calculado o valor final a ser pago pelo hospede. Sendo realizado todos os consumos, basta selecionar o tipo de pagamento e concluir o fechamento. 

 - O botão para visualizar o recibo será disponibilizado com os detalhes da reserva e dados do hospede. 

 - Sendo disponível ser impresso ou salvo como imagem em um local escolhido na máquina do hotel.
</value>
  </data>
  <data name="lReser.Text" xml:space="preserve">
    <value> - Na tela de reservas, existe uma lista de todos hospedes cadastrados no sistema no lado direito superior, e uma lista com todas reservas que existem ativas ou não, na lista de reservas, basta clicar em qualquer reserva para alterar ou cancelar uma reserva.

 - Para realizar uma nova reserva, basta clicar em “Nova reserva”, preencher um CPF que esteja cadastrado no sistema, uma lista com as reservas feitas no quarto que será selecionado, se exibirá no meio com as datas preenchidas. 

 - Selecionando as datas e a possível entrada, só clicar em salvar.
</value>
  </data>
  <data name="lCheckin.Text" xml:space="preserve">
    <value> - Na opção de check-in, só irá realizar check-in se a data do check-in for exatamente no dia atual, sendo assim basta selecionar a reserva feita pelo CPF do hospede, as informações e detalhes da reserva e quarto ficarão disponíveis na tela, e um menu de pagamento se abrirá, caso houver pendência, basta selecionar o valor, e o tipo de pagamento e ao ser totalmente pago, poderá ser realizado o check-in.
</value>
  </data>
  <data name="lHosp.Text" xml:space="preserve">
    <value> - Para fazer a manutenção dos dados de um hospede, ao clicar no botão de hospedes, a lista de hospedes cadastrados aparecerá no lado direito, ao clicar em qualquer hospede, os detalhes aparecerão no painel direito, sendo disponível a alteração e exclusão dos dados.

 - Para cadastrar um novo, basta clicar em “Novo” e preencher todas informações e clicar em salvar.
</value>
  </data>
  <data name="lQuartos.Text" xml:space="preserve">
    <value> - Ao clicar em quartos, uma lista dos quartos já cadastrado fica disponível a esquerda, se clicar em algum, os detalhes aparecerão no lado direito da tela, onde vai aparecer a opção para alterar os detalhes, inclusive excluir o quarto. 
 - Para adicionar um quarto novo, no meio da tela, clicar em “Novo”. 
 - O formulário aparece, e é só preencher todas as opções, inclusive selecionar uma imagem. 
 - Clicar em salvar, o formulário fecha e atualiza a lista de quartos.
</value>
  </data>
</root>